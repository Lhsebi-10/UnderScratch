"use strict";(self.webpackChunkunder_scratch_docs=self.webpackChunkunder_scratch_docs||[]).push([[246],{7721:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Current Version/attacks","title":"Attacks","description":"This Page may be incomplete in some Areas.","source":"@site/docs/Current Version/attacks.md","sourceDirName":"Current Version","slug":"/Current Version/attacks","permalink":"/UnderScratch/docs/Current Version/attacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Current Version/attacks.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Attacks","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Enemies","permalink":"/UnderScratch/docs/Current Version/enemies"},"next":{"title":"Known Issues","permalink":"/UnderScratch/docs/Current Version/known issues"}}');var n=a(4848),i=a(8453);const o={title:"Attacks",sidebar_position:4},r=void 0,l={},c=[{value:"Atacks",id:"atacks",level:2},{value:"Attack Manager",id:"attack-manager",level:2},{value:"Attack Objects",id:"attack-objects",level:2},{value:"Attack Colors",id:"attack-colors",level:2}];function d(e){const t={admonition:"admonition",br:"br",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.admonition,{title:"Stub",type:"note",children:(0,n.jsx)(t.p,{children:"This Page may be incomplete in some Areas."})}),"\n",(0,n.jsx)(t.admonition,{title:"WIP",type:"warning",children:(0,n.jsx)(t.p,{children:"This Feature is incomplete."})}),"\n",(0,n.jsx)(t.h2,{id:"atacks",children:"Atacks"}),"\n",(0,n.jsxs)(t.p,{children:["Oh boy, this is a long one.\nAttacks in Underscratch are handled in a somewhat uniqe way.",(0,n.jsx)(t.br,{}),"\n","There is a Manager OBject, that tells the game what attacks to perform, it uses a list.",(0,n.jsx)(t.br,{}),"\n","Each attack is its own separate object, this is done to give Developers more freedom in how they design their attacks (and bc its easier to do but lets not talk abt that)."]}),"\n",(0,n.jsx)(t.h2,{id:"attack-manager",children:"Attack Manager"}),"\n",(0,n.jsxs)(t.p,{children:["This is the Manager Object, it has a script that adds all the attacks you want to have onto a list.",(0,n.jsx)(t.br,{}),"\n",'If you want to add an Attack, add a block to add the name of your attack objects name to the list (called "attack list"), and you should be good to go.',(0,n.jsx)(t.br,{}),"\n",'If the "attack list" list has played the last attack, it will automatically set the index back to 1, repeating the attacks in the given order.\nNote that the list of attacks is dependendt on the order in the script, there is no ID system of any sorts.']}),"\n",(0,n.jsx)(t.h2,{id:"attack-objects",children:"Attack Objects"}),"\n",(0,n.jsx)(t.p,{children:'Each Attack is its own Object, inside of the Object, you need the following scripts pasted in (you can copy them form the "bullet" object):'}),"\n",(0,n.jsxs)("div",{style:{display:"flex"},children:[(0,n.jsx)("img",{src:"/img/attacks-mandatory1.png",alt:"First Image",style:{width:"48%",height:"200px",objectFit:"contain",marginRight:"2%"}}),(0,n.jsx)("img",{src:"/img/attacks-mandatory2.png",alt:"Second Image",style:{width:"50%",height:"150px",objectFit:"contain"}})]}),"\n",(0,n.jsxs)(t.p,{children:['Then, you simply write the logic for the bullets in a "when i start as a clone" script, furthermore, you can adjust the first script (left) to spawn more clones, maybe have it add to a variable and if said variable is a certain ammount change costumes, you decide!',(0,n.jsx)(t.br,{}),"\n","Attacks are the most versatile part of Underscratch, you can truly make anything you want!"]}),"\n",(0,n.jsx)(t.h2,{id:"attack-colors",children:"Attack Colors"}),"\n",(0,n.jsx)(t.admonition,{title:"caution",type:"danger",children:(0,n.jsx)(t.p,{children:"As of version a1.0.0 Blue and Orange attacks are not functional."})}),"\n",(0,n.jsxs)(t.p,{children:["Currently, the type a bullet has is fully dependent on its color.",(0,n.jsx)(t.br,{}),"\n","The Colors are as follows:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:['White - Normal attack, deals "bullet_normal_dmg"\'s damadge:   ',(0,n.jsx)("span",{style:{backgroundColor:"#ffffff",display:"inline-block",width:"1em",height:"1em",border:"1px solid #ccc",marginLeft:"0.5em"}}),"  #ffffff"]}),"\n",(0,n.jsxs)(t.li,{children:['Blue - damadges the player only if they are moving whilst touching it, deals "bullet_blue_dmg"\'s damadge: ',(0,n.jsx)("span",{style:{backgroundColor:"#3f51ff",display:"inline-block",width:"1em",height:"1em",border:"1px solid #ccc",marginLeft:"0.5em"}})," #3f51ff"]}),"\n",(0,n.jsxs)(t.li,{children:['orange - damdges the player only if they arent moving whilst touching it, deals "bullet_orange_dmg"\'s damadge:     ',(0,n.jsx)("span",{style:{backgroundColor:"#ffa500",display:"inline-block",width:"1em",height:"1em",border:"1px solid #ccc",marginLeft:"0.5em"}})," #ffa500"]}),"\n",(0,n.jsxs)(t.li,{children:['Green - Heals the player "bullet_green_heal"\'s value:  ',(0,n.jsx)("span",{style:{backgroundColor:"#00ff00",display:"inline-block",width:"1em",height:"1em",border:"1px solid #ccc",marginLeft:"0.5em"}})," #00ff00"]}),"\n",(0,n.jsxs)(t.li,{children:['Yellow - Destroyable by the Yellow Soul, if touched, deal "soul_yellow_dmg"\'s damdge:  ',(0,n.jsx)("span",{style:{backgroundColor:"#ffd600",display:"inline-block",width:"1em",height:"1em",border:"1px solid #ccc",marginLeft:"0.5em"}})," #ffd600"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var s=a(6540);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);